You are trapped at uninhabited island only with your laptop. Still you don't want your significant other to worry about
you, so you are going to send a message in a bottle with your picture or at least a couple of words from you (sure, you
could just write down the words, but that would be less fun). You're going to use uuencoding for that.
Uuencoding is a form of binary-to-text encoding, which uses only symbols from 32-95 diapason, which means all symbols
used in the encoding are printable.
Description of encoding

A uuencoded file starts with a header line of the form:

begin <mode> <file><newline>
<mode>    is the file's Unix file permissions as three octal digits (e.g. 644, 744). For Windows 644 is always used.
<file>    is the file name to be used when recreating the binary data.
<newline> signifies a newline character, used to terminate each line.

Each data line uses the format:
<length character><formatted characters><newline>
<length character> is a character indicating the number of data bytes which have been encoded on that line. This is an
                   ASCII character determined by adding 32 to the actual byte count, with the sole exception of a grave
                   accent "`" (ASCII code 96) signifying zero bytes. All data lines except the last (if the data was not
                   divisible by 45), have 45 bytes of encoded data (60 characters after encoding). Therefore, the vast
                   majority of length values is 'M', (32 + 45 = ASCII code 77 or "M").
<formatted characters> are encoded characters.

The mechanism of uuencoding repeats the following for every 3 bytes (if there are less than 3 bytes left, trailing 0 are
 added):
1. Start with 3 bytes from the source, 24 bits in total.
2. Split into 4 6-bit groupings, each representing a value in the range 0 to 63: bits (00-05), (06-11), (12-17) and (18-23).
3. Add 32 to each of the values. With the addition of 32 this means that the possible results can be between 32 (" " space)
 and 95 ("_" underline). 96 ("`" grave accent) as the "special character" is a logical extension of this range.
4. Output the ASCII equivalent of these numbers.
5. For example, we want to encode a word "Cat". ASCII values for C,a,t are 67,97,116, or 010000110110000101110100 in
   binary. After dividing into four groups, we get 010000 110110 000101 110100, which is 16,54,5,52 in decimal. Adding 32
   to this values and encoding back in ASCII, the final result is 0V%T.
The file ends with two lines:
`<newline>
end<newline>

**********************************************
Formal Inputs & Outputs

Input
a byte array or string.

Output
a string containing uuencoded input.

**********************************************
Examples

Input: Cat
Output:
begin 644 cat.txt
#0V%T
`
end

Input: I feel very strongly about you doing duty. Would you give me a little more documentation about your reading in
French? I am glad you are happy — but I never believe much in happiness. I never believe in misery either. Those are
things you see on the stage or the screen or the printed pages, they never really happen to you in life.
Output:
begin 644 file.txt
M22!F965L('9E<GD@<W1R;VYG;'D@86)O=70@>6]U(&1O:6YG(&1U='DN(%=O
M=6QD('EO=2!G:79E(&UE(&$@;&ET=&QE(&UO<F4@9&]C=6UE;G1A=&EO;B!A
M8F]U="!Y;W5R(')E861I;F<@:6X@1G)E;F-H/R!)(&%M(&=L860@>6]U(&%R
M92!H87!P>2#B@)0@8G5T($D@;F5V97(@8F5L:65V92!M=6-H(&EN(&AA<'!I
M;F5S<RX@22!N979E<B!B96QI979E(&EN(&UI<V5R>2!E:71H97(N(%1H;W-E
M(&%R92!T:&EN9W,@>6]U('-E92!O;B!T:&4@<W1A9V4@;W(@=&AE('-C<F5E
M;B!O<B!T:&4@<')I;G1E9"!P86=E<RP@=&AE>2!N979E<B!R96%L;'D@:&%P
3<&5N('1O('EO=2!I;B!L:69E+C P
`
end

**********************************************
Bonuses

Bonus 1
Write uudecoder, which decodes uuencoded input back to a byte array or string

Bonus 2
Write encoder for files as well.

Bonus 3
Make encoding parallel.

**********************************************
Further Reading

Binary-to-text encoding on Wikipedia.

**********************************************
Finally

This challenge is posted by /u/EvgeniyZh
Also have a good challenge idea?
Consider submitting it to /r/dailyprogrammer_ideas


**************************************************************************************
Support Information
**************************************************************************************
Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex
-------------------------------------------------------------------------------------
(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60
(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61
(stx)   2 0002 0x02 | "      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62
(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63
(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64
(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65
(ack)   6 0006 0x06 | &      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66
(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67
(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68
(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69
(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a
(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b
(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c
(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d
(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e
(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f
(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70
(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71
(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72
(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73
(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74
(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75
(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76
(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77
(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78
(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79
(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a
(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b
(fs)   28 0034 0x1c | <      60 0074 0x3c | \      92 0134 0x5c | |     124 0174 0x7c
(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d
(rs)   30 0036 0x1e | >      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e
(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f

Example *****
(C, a, t) -> (67, 97, 116)
010000 11110 000101 110100
  16     54      5     52   -> Decimal
   0      V      %      T

0V%T

******
Using simple bitwise operations:
data[0] = (byte) (width & 0xFF);
data[1] = (byte) ((width >> 8) & 0xFF);
How it works:
•& 0xFF masks all but the lowest eight bits.
•>> 8 discards the lowest 8 bits by moving all bits 8 places to the right.
•The cast to byte is necessary because these bitwise operations work on an int and return an int, which is a bigger
data type than byte. The case is safe, since all non-zero bits will fit in the byte. For more information,
see Conversions and Promotions <http://java.sun.com/docs/books/jls/third%5Fedition/html/conversions.html>.

